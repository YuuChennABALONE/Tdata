
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepCut()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepCut(const TopoShape& s1, const TopoShape& s2, bool isForward = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit BoolBRepDefeaturing(const TopoShape& shape)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepFuse()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepFuse(const TopoShape& s1, const TopoShape& s2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepSection(const TopoShape& s1, const TopoShape& s2, bool perfomNow = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepSection(const TopoShape& s1, const Plane& p1, bool perfomNow = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepSection(const TopoShape& s1, const std::shared_ptr<Geom3Surface>& surface, bool perfomNow = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepSection(const std::shared_ptr<Geom3Surface>& surface, const TopoShape& s2, bool perfomNow = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepSection(const std::shared_ptr<Geom3Surface>& s1, const std::shared_ptr<Geom3Surface>& s2, bool perfomNow = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API void SimplifyResult(bool isUnfiyEdges = true, bool isUnifyFaces = true, double angularTol = Precision::Angular()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> AxisT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> [[nodiscard]] bool IsCoaxial(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& angtol, const OtherScalar3& distol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> AxisT& Mirror(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] AxisT Mirrored(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] AxisT Scaled(const PointT<OtherScalar, DIM> point, const OtherScalar2& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> AxisT& Translate(const PointT<OtherScalar, DIM>& p1, const PointT<OtherScalar2, DIM>& p2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AxisT()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> AxisT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetDirection(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> [[nodiscard]] bool IsCoaxial(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& angtol, const OtherScalar3& distol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] bool IsCoaxial(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& angtol, const OtherScalar3& distol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsNormal(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsOpposite(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsParallel(const AxisT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] double Angle(const AxisT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> AxisT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> AxisT& Mirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] AxisT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] AxisT Mirrored(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> AxisT& Rotate(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] AxisT Scaled(const PointT<OtherScalar, DIM> point, const OtherScalar2& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const PointT<Scalar, DIM>& Location()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& xdir, const DirectionT<OtherScalar3, DIM>& ydir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& xdir, bool isright = true),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> explicit FrameT(const AxisT<OtherScalar, DIM>& axis, bool isright = true),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> void SetXAxis(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> void SetYAxis(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> void SetXDirection(const DirectionT<OtherScalar, DIM>& x),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> void SetYDirection(const DirectionT<OtherScalar, DIM>& y),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 >= 1>> [[nodiscard]] const DirectionT<Scalar, DIM>& XDirection(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 >= 2>> [[nodiscard]] const DirectionT<Scalar, DIM>& YDirection(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> FrameT& Mirror(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] FrameT Mirrored(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] FrameT Mirrored(const AxisT<OtherScalar, DIM>& a),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> FrameT& Rotate(const PointT<OtherScalar, DIM>& point, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> [[nodiscard]] FrameT Rotated(const PointT<OtherScalar, DIM>& point, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] FrameT Scaled(const PointT<OtherScalar, DIM>& point, const OtherScalar2& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] FrameT Translated(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] FrameT Translated(const PointT<OtherScalar, DIM>& p1, const PointT<OtherScalar2, DIM>& p2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepCut()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepCut(const TopoShape& s1, const TopoShape& s2, bool isForward = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepDefeaturing()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit BoolBRepDefeaturing(const TopoShape& shape)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepFuse()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API BoolBRepFuse(const TopoShape& s1, const TopoShape& s2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const PointT<Scalar, DIM>& Location()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "FrameT()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& xdir, const DirectionT<OtherScalar3, DIM>& ydir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& xdir, bool isright = true),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> explicit FrameT(const AxisT<OtherScalar, DIM>& axis, bool isright = true),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& normal, const DirectionT<OtherScalar3, DIM>& x),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> FrameT(const PointT<OtherScalar, DIM>& point, const DirectionT<OtherScalar2, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetDirection(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> void SetXDirection(const DirectionT<OtherScalar, DIM>& x),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> void SetYDirection(const DirectionT<OtherScalar, DIM>& y),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] AxisT<Scalar, DIM> Axis(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] const DirectionT<Scalar, DIM>& Direction(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 >= 1>> [[nodiscard]] const DirectionT<Scalar, DIM>& XDirection(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] bool IsCoplanar(const FrameT<OtherScalar, DIM>& other, const OtherScalar2& distol, const OtherScalar3& angtol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] bool IsCoplanar(const AxisT<OtherScalar, DIM>& a, const OtherScalar2& distol, const OtherScalar3& angtol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> FrameT& Mirror(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> FrameT& Mirror(const AxisT<OtherScalar, DIM>& a),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> FrameT& Mirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] FrameT Mirrored(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] FrameT Mirrored(const AxisT<OtherScalar, DIM>& a),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] FrameT Mirrored(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> FrameT& Rotate(const AxisT<OtherScalar, DIM>& a, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> [[nodiscard]] FrameT Rotated(const PointT<OtherScalar, DIM>& point, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] FrameT Rotated(const AxisT<OtherScalar, DIM>& a, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> FrameT& Scale(const PointT<OtherScalar, DIM>& point, const OtherScalar2& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] FrameT Scaled(const PointT<OtherScalar, DIM>& point, const OtherScalar2& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> FrameT& Translate(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit DirectionT(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit DirectionT(const CoordT<OtherScalar, DIM>& v),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> explicit DirectionT(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsEqual(const DirectionT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> [[nodiscard]] auto Angle(const DirectionT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto Cross(const DirectionT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> DirectionT& Mirror(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> DirectionT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] DirectionT Mirrored(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] DirectionT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> DirectionT& Rotate(const OtherScalar& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> [[nodiscard]] DirectionT Rotated(const OtherScalar& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "DirectionT()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit DirectionT(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit DirectionT(const CoordT<OtherScalar, DIM>& v),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> explicit DirectionT(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> void SetCoord(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename = typename std::enable_if_t<DIM >= 4 && std::is_convertible_v<OtherScalar, Scalar>>> void SetW(const OtherScalar& w),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsEqual(const DirectionT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsNormal(const DirectionT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsOpposite(const DirectionT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsParallel(const DirectionT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] auto Angle(const DirectionT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] auto AngleWithRef(const DirectionT<OtherScalar, DIM>& other, const DirectionT<OtherScalar2, DIM>& ref),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto Cross(const DirectionT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> DirectionT& Mirror(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> DirectionT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> DirectionT& Mirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] DirectionT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] DirectionT Mirrored(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] DirectionT Rotated(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> explicit VectorT(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> VectorT(const PointT<OtherScalar, DIM>& p1, const PointT<OtherScalar2, DIM>& p2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 2, int> = 0> [[nodiscard]] auto Angle(const VectorT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto Cross(const VectorT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> VectorT& Mirror(const VectorT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> VectorT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] VectorT Mirrored(const VectorT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] VectorT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> VectorT& Rotate(const OtherScalar& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> [[nodiscard]] VectorT Rotated(const OtherScalar& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Norm()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "VectorT()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit VectorT(const DirectionT<OtherScalar, DIM>& dir),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> explicit VectorT(const CoordT<OtherScalar, DIM>& v),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> explicit VectorT(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> VectorT(const PointT<OtherScalar, DIM>& p1, const PointT<OtherScalar2, DIM>& p2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename... T> void SetCoord(T... vs),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetCoord(const CoordT<OtherScalar, DIM>& v),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, typename OtherScalar3> [[nodiscard]] bool IsEqual(const VectorT<OtherScalar, DIM>& other, const OtherScalar2& tolDis, const OtherScalar3& tolAng),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsNormal(const VectorT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsOpposite(const VectorT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsParallel(const VectorT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] auto Angle(const VectorT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] Scalar AngleWithRef(const VectorT<OtherScalar, DIM>& other, const VectorT<OtherScalar2, DIM>& ref),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SquaredNorm()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto Cross(const VectorT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "VectorT& Normalize()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] VectorT Normalized()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> VectorT& Mirror(const VectorT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> VectorT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> VectorT& Mirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] VectorT Mirrored(const VectorT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] VectorT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] VectorT Mirrored(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> VectorT& Rotate(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] VectorT Rotated(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] VectorT Scaled(const OtherScalar& scale),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const CoordT<Scalar, DIM>& TranslationPart()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetMirror(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetMirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> void SetScale(const PointT<OtherScalar, DIM>& point, const OtherScalar2& s),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> void SetTransformation(const AxisT<OtherScalar, DIM>& axisFrom, const AxisT<OtherScalar2, DIM>& axisTo),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> void SetTransformation(const AxisT<OtherScalar, DIM>& axisTo),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Scalar ScaleFactor()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] TransformationType Type()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const CoordT<Scalar, DIM>& TranslationPart()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "constexpr TransformationT()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int OtherDIM> explicit TransformationT(const TransformationT<OtherScalar, OtherDIM>& trans),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetMirror(const PointT<OtherScalar, DIM>& point),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetMirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> void SetMirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> void SetRotation(const PointT<OtherScalar, DIM>& point, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetRotation(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetRotation(const QuaternionT<OtherScalar>& q),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetRotationPart(const QuaternionT<OtherScalar>& q),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> void SetScale(const PointT<OtherScalar, DIM>& point, const OtherScalar2& s),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetDisplacement(const FrameT<OtherScalar, DIM>& frameFrom, const FrameT<OtherScalar2, DIM>& frameTo),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetTransformation(const FrameT<OtherScalar, DIM>& frameFrom, const FrameT<OtherScalar2, DIM>& frameTo),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void SetTransformation(const FrameT<OtherScalar, DIM>& frameTo),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetTranslation(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> void SetTranslation(const PointT<OtherScalar, DIM>& p1, const PointT<OtherScalar2, DIM>& p2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void SetTranslationPart(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetType(const TransformationType& t)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Scalar ScaleFactor()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> void GetRotation(CoordT<OtherScalar, DIM>& axis, OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const MatrixT<Scalar, DIM, DIM>& HVectorialPart()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "TransformationT& Invert()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> TransformationT& LeftMultiply(const TransformationT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] TransformationT LeftMultiplied(const TransformationT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] TransformationT Powered(int power)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> void Transform(CoordT<OtherScalar, DIM>& coord),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> PointT& Mirror(const PointT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> PointT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] PointT Mirrored(const PointT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] PointT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 2>> [[nodiscard]] PointT Rotated(const PointT<OtherScalar, DIM>& point, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2> [[nodiscard]] bool IsEqual(const PointT<OtherScalar, DIM>& other, const OtherScalar2& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto Distance(const PointT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] auto SquaredDistance(const PointT<OtherScalar, DIM>& other),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> PointT& Mirror(const PointT<OtherScalar, DIM>& p),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> PointT& Mirror(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> PointT& Mirror(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] PointT Mirrored(const AxisT<OtherScalar, DIM>& axis),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, int DIM2 = DIM, std::enable_if_t<DIM2 == 3, int> = 0> [[nodiscard]] PointT Mirrored(const FrameT<OtherScalar, DIM>& frame),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> PointT& Rotate(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar, typename OtherScalar2, int DIM2 = DIM, typename = typename std::enable_if_t<DIM2 == 3>> [[nodiscard]] PointT Rotated(const AxisT<OtherScalar, DIM>& axis, const OtherScalar2& angle),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "template<typename OtherScalar> [[nodiscard]] PointT Translated(const VectorT<OtherScalar, DIM>& vec),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const std::shared_ptr<Geom3Surface>& s, double tolDegen)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit MakeFace(const TopoWire& w, bool onlyPlane = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const Plane& p, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const Cylinder& c, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const Cone& c, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const Sphere& s, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const Torus& t, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeFace(const std::shared_ptr<Geom3Surface>& s, const TopoWire& w, bool inside = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit MakeFace(const TopoWire& w, bool onlyPlane = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API GccCircle3Tangent(const GccQualifiedCurve& qualified1, const GccQualifiedCurve& qualified2, const GccQualifiedCurve& qualified3, double tolerance, double parameter1, double parameter2, double parameter3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API GccCircle3Tangent(const GccQualifiedCurve& qualified1, const GccQualifiedCurve& qualified2, const Point2& point, double tolerance, double parameter1, double parameter2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API GccCircle3Tangent(const GccQualifiedCurve& qualified1, const Point2& point1, const Point2& point2, double tolerance, double parameter1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API GccCircle3Tangent(const Point2& point1, const Point2& point2, const Point2& point3, double tolerance)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API virtual void D1(double x, double& f, double& d)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API virtual std::shared_ptr<LawFunction> Trim(double fp, double lp, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "explicit Conic2Constraint(const Point2& point)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeConic2FromConstraints(const Conic2Constraint& startConstraint, const Conic2Constraint& endConstraint, double parameter)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit MakeConic2FromConstraints(const std::vector<Conic2Constraint>& constraints)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API double Parameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor3Curve& c, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor2Curve& c, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor3Curve& c, double u1, double u2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor2Curve& c, double u1, double u2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor3Curve& c, double u1, double u2, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor2Curve& c, double u1, double u2, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API double Parameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API double Parameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static double Length(const Adaptor3Curve& c, double u1, double u2, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API double Parameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor3Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(const Adaptor2Curve& c, double abscissa, double u0, double ui, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API double Parameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Geom2Ellipse()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit Geom2Ellipse(const Ellipse2& e)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Ellipse(const Axis2& majorAxis, double major, double minor, bool isRight)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Ellipse(const Frame2& frame, double major, double minor)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API double FocalParameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API double SemilatusRectum()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit Geom3Parabola(const Parabola3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3Parabola(const Frame3& frame, double focal)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3Parabola(const Axis3& directrix, const Point3& focus)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Hyperbola(const Axis2& axis, double major, double minor, bool isRight = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Hyperbola(const Frame2& frame, double major, double minor)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Geom2Parabola()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Parabola(const Axis2& axis, double focal, bool isRight = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Parabola(const Frame2& frame, double focal)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom2Parabola(const Axis2& directrix, const Point2& focus, bool isRight = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3BSplineCurve(const std::vector<Point3>& pts, const std::vector<double>& weights, const std::vector<double>& knots, const std::vector<int>& multiplicities, int degree, bool isPeriodic = false, bool checkRational = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3BSplineSurface()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3BSplineSurface(const Array2<Point3>& pts, const std::vector<double>& uKnots, const std::vector<double>& vKnots, const std::vector<int>& uMults, const std::vector<int>& vMults, int uDegree, int vDegree, bool uPeriodic = false, bool vPeriodic = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3BSplineSurface(const Array2<Point3>& pts, const Array2<double>& weights, const std::vector<double>& uKnots, const std::vector<double>& vKnots, const std::vector<int>& uMults, const std::vector<int>& vMults, int uDegree, int vDegree, bool uPeriodic = false, bool vPeriodic = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API void InsertUKnot(double u, int m, double parametricTolerance, bool add = true)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3ConicalSurface(const Frame3& frame, double r, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API Point3 Apex()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API double SemiAngle()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Cone(const Frame3& frame, double r, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Cone& Scale(const Point3& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Geom3Ellipse()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit Geom3Ellipse(const Ellipse3& e)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3Ellipse(const Frame3& frame, double major, double minor)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3Ellipse(const Frame3& frame, double major, double minor)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit Geom3Hyperbola(const Hyperbola3& h)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Geom3Hyperbola(const Frame3& frame, double major, double minor)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API void Coefficients(double& a, double& b, double& c, double& d)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Plane()\t Default constructor\n,\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit Plane(const Frame3& frame)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Plane(const Point3& point, const Direction3& dir)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Plane(double a, double b, double c, double d)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API bool Contains(const Point3& point, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit GeomAPIIntCurveCurve2(const std::shared_ptr<Geom2Curve>& c1, double tol = 1.0e-6)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool IsPlanarCurve(const std::shared_ptr<Geom3Curve>& c, Plane& plane, double tol = 1.0e-7)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeArcOfCircle2d(const Point2& p1, const Vector2& v, const Point2& p2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeGeom3Ellipse(const Frame3& frame, double majorRadius, double minorRadius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeGeom3Ellipse(const Point3& s1, const Point3& s2, const Point3& center)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool IsSolidBounded(const TopoSolid& s)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit BRepFaceClassifier(const TopoFace& f)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API void Perform(const Point2& p, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static TopoShape FixShape(const TopoShape& shape, double prec, double maxTol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Read(TopoShape& s, const std::string& file)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Write(const TopoShape& s, std::ostream& os, int format = 3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Write(const TopoShape& s, std::ostream& os, bool withTriangles, int format = 3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Write(const TopoShape& s, const std::string& file, int format = 3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Write(const TopoShape& s, const std::string& file, bool withTriangles, int format = 3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static bool Read(TopoShape& s, std::istream& is)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Radius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Length()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Distance(const PointT<double, DIM>& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Radius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Distance(const PointT<double, DIM>& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SquaredDistance(const PointT<double, DIM>& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "CircleS& Scale(const PointT<double, DIM>& p, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Area()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "EllipseS& Scale(const PointT<double, DIM>& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "EllipseS& Transform(const TransformationT<double, DIM>& tr)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double Area()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double FocalParameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SemilatusRectum()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double FocalParameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SemilatusRectum()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double FocalParameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SemilatusRectum()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double FocalParameter()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double SemilatusRectum()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] bool Contains(const PointT<double, DIM>& p, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const PointT<double, DIM>& Location()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Scaled(const PointT<double, DIM>& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Derived& Translate(const VectorT<double, DIM>& vec)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Translated(const PointT<double, DIM>& p1, const PointT<double, DIM>& p2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetLocation(const PointT<double, DIM>& point)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetDirection(const DirectionT<double, DIM>& dir)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetPosition(const AxisT<double, DIM>& axis)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const DirectionT<double, DIM>& Direction()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Angle(const LineBase& other)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Derived& Reverse()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "LineS(double a, double b, double c)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void Coefficients(double& a, double& b, double& c)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Distance(const Point2& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto SquaredDistance(const Point2& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto SquaredDistance(const LineS& l)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] LineS Normal(const Point2& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "LineS& Rotate(const Point2& point, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] LineS Rotated(const Point2& point, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Distance(const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto SquaredDistance(const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API ComputePointsAbscissa(double tol, const Adaptor3Curve& c, double abscissa, double u0)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] bool Contains(const PointT<double, DIM>& p, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const PointT<double, DIM>& Location()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Scaled(const PointT<double, DIM>& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Transformed(const TransformationT<double, DIM>& tr)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Derived& Translate(const PointT<double, DIM>& p1, const PointT<double, DIM>& p2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Translated(const VectorT<double, DIM>& vec)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetLocation(const PointT<double, DIM>& point)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetDirection(const DirectionT<double, DIM>& dir)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetPosition(const AxisT<double, DIM>& axis)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const DirectionT<double, DIM>& Direction()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] const AxisT<double, DIM>& Position()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Angle(const LineBase& other)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] Derived Reversed()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto SquaredDistance(const LineS& l)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] auto Distance(const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] LineS Normal(const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "LineS& Mirror(const Frame3& frame)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] LineS Rotated(const Axis3& axis, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Classifier2d(const std::vector<Point2>& pts, double tolU, double tolV, double uMin, double vMin, double uMax, double vMax)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API int IsInOut(const Point2& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API int IsInOutOn(const Point2& p, double tol)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void AdjustPeriodic(double ufirst, double ulast, double precision, double& u1, double& u2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Circle2& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void AdjustPeriodic(double ufirst, double ulast, double precision, double& u1, double& u2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 CircleValue(double u, const Frame3& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 CircleValue(double u, const Frame2& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 CircleD0(double u, const Frame3& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 CircleD0(double u, const Frame2& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 CircleD1(double u, const Frame3& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD1(double u, const Frame3& pos, double radius, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 CircleD1(double u, const Frame2& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD1(double u, const Frame2& pos, double radius, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 CircleD2(double u, const Frame3& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD2(double u, const Frame3& pos, double radius, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 CircleD2(double u, const Frame2& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD2(double u, const Frame2& pos, double radius, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 CircleD3(double u, const Frame3& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD3(double u, const Frame3& pos, double radius, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 CircleD3(double u, const Frame2& pos, double radius)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void CircleD3(double u, const Frame2& pos, double radius, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 CircleDN(double u, const Frame3& pos, double radius, int n)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 CircleDN(double u, const Frame2& pos, double radius, int n)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static double CircleParameter(const Frame3& pos, const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static double CircleParameter(const Frame2& pos, const Point2& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 D0(double u, const Line3& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 D0(double u, const Circle3& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 D0(double u, const Ellipse3& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 D0(double u, const Parabola3& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point3 D0(double u, const Hyperbola3& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 D0(double u, const Line2& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 D0(double u, const Circle2& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 D0(double u, const Ellipse2& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 D0(double u, const Parabola2& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Point2 D0(double u, const Hyperbola2& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D1(double u, const Line3& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Line3& line, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D1(double u, const Circle3& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Circle3& circle, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D1(double u, const Ellipse3& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Ellipse3& ellipse, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D1(double u, const Parabola3& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Parabola3& parabola, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D1(double u, const Hyperbola3& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Hyperbola3& hyperbola, Point3& p, Vector3& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Line2& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Line2& line, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Circle2& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Circle2& circle, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Ellipse2& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Ellipse2& ellipse, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Parabola2& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Parabola2& parabola, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D1(double u, const Hyperbola2& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D1(double u, const Hyperbola2& hyperbola, Point2& p, Vector2& v1)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D2(double u, const Line3& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Line3& line, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D2(double u, const Circle3& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Circle3& circle, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D2(double u, const Ellipse3& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Ellipse3& ellipse, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D2(double u, const Parabola3& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Parabola3& parabola, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D2(double u, const Hyperbola3& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Hyperbola3& hyperbola, Point3& p, Vector3& v1, Vector3& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D2(double u, const Line2& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Line2& line, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D2(double u, const Circle2& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Circle2& circle, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D2(double u, const Ellipse2& ellipse)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Ellipse2& ellipse, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D2(double u, const Parabola2& parabola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Parabola2& parabola, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D2(double u, const Hyperbola2& hyperbola)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D2(double u, const Hyperbola2& hyperbola, Point2& p, Vector2& v1, Vector2& v2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D3(double u, const Line3& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Line3& line, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector3 D3(double u, const Circle3& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Circle3& circle, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Ellipse3& ellipse, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D3(double u, const Line2& line)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Line2& line, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AMCAX_API static Vector2 D3(double u, const Circle2& circle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Circle2& circle, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Ellipse2& ellipse, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static void D3(double u, const Parabola2& parabola, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "Cylinder()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Cylinder(const Frame3& frame, double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API Cylinder& Scale(const Point3& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetMajorRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetMinorRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Directrix2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] PointT<double, DIM> Focus1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double MajorRadius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double MinorRadius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Asymptote1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Asymptote2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] HyperbolaS ConjugateBranch2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "HyperbolaS& Scale(const PointT<double, DIM>& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetMajorRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetMinorRadius(double r)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Directrix1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Directrix2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] PointT<double, DIM> Focus1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] PointT<double, DIM> Focus2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double MajorRadius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] double MinorRadius()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Asymptote1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] AxisT<double, DIM> Asymptote2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] HyperbolaS ConjugateBranch1()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "[[nodiscard]] HyperbolaS ConjugateBranch2()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "HyperbolaS& Scale(const PointT<double, DIM>& point, double scale)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAXMeshing_API void setTriMeshAsOutput(iPoints    &points, iTriangles &triangles),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAXMeshing_API void Union()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAXMeshing_API void computeInterSegments()\t after computing labels.\n\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAXMeshing_API std::vector<InterSegments> & getInterSegments(),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API explicit GeneralTransformShape(const GeneralTransformation3& t)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API GeneralTransformShape(const TopoShape& s, const GeneralTransformation3& t, bool copy = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeBox(double dx, double dy, double dz)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeBox(const Point3& p, double dx, double dy, double dz)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeBox(const Point3& p1, const Point3& p2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeBox(const Frame3& frame, double dx, double dy, double dz)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API const TopoFace& XMinFace()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API const TopoFace& ZMinFace()\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeTorus(double r1, double r2, double angle1, double angle2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeTorus(double r1, double r2, double angle1, double angle2, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeTorus(const Frame3& frame, double r1, double r2, double angle1, double angle2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeTorus(const Frame3& frame, double r1, double r2, double angle1, double angle2, double angle)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePolygon(const Point3& p1, const Point3& p2)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API void Add(const Point3& p)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Point3& p1, const Point3& p2, const Point3& p3, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Point3& p1, const Point3& p2, const Point3& p3, const Point3& p4, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Frame3& frame, double radius, int nside, double height)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Frame3& frame, const Point3& p1, const Point3& p2, const Point3& p3, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Frame3& frame, const Point3& p1, const Point3& p2, const Point3& p3, const Point3& p4, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Frame3& frame, const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakePyramid(const Point3& baseLocation, const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRevol(const TopoShape& s, const Axis3& a, double d, bool copy = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRevol(const TopoShape& s, const Axis3& a, bool copy = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Point3& p1, const Point3& p2, const Point3& p3, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Point3& p1, const Point3& p2, const Point3& p3, const Point3& p4, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Frame3& frame, double radius, int nside, double height)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Frame3& frame, const Point3& p1, const Point3& p2, const Point3& p3, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Frame3& frame, const Point3& p1, const Point3& p2, const Point3& p3, const Point3& p4, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Frame3& frame, const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API MakeRightPrism(const Point3& baseLocation, const std::vector<Point3>& basepoints, const Point3& apex)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static TopoShape SewShape(const std::list<TopoShape>& shapes, double tolerance)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API TransformShape(const TopoShape& s, const Transformation3& tr, bool copyGeom = false, bool copyMesh = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API TransformShape(const TopoShape& s, const Transformation3& tr, bool copyGeom = false, bool copyMesh = false)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> ApproxPoints(const std::vector<Point3>& points, int degree, int npoles, bool isClosed = false, ApproxParameterizationType ptype = ApproxParameterizationType::ChordLength)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BlendCurves( const std::shared_ptr<Geom3BSplineCurve>& curve1, bool isFront1, ContinuityType cont1, const std::shared_ptr<Geom3BSplineCurve>& curve2, bool isFront2, ContinuityType cont2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BlendCurves( const std::shared_ptr<Geom3BSplineCurve>& curve1, bool isFront1, ContinuityType cont1, std::vector<double>& parameters1, const std::shared_ptr<Geom3BSplineCurve>& curve2, bool isFront2, ContinuityType cont2, std::vector<double>& parameters2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> BlendSurfaces( const std::shared_ptr<Geom3BSplineSurface>& surf1, bool isUIso1, bool isFront1, ContinuityType cont1, std::vector<double>& parameters1, const std::shared_ptr<Geom3BSplineSurface>& surf2, bool isUIso2, bool isFront2, ContinuityType cont2, std::vector<double>& parameters2, bool autoReverse, bool isPrecise, const std::vector<double>& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> BlendFaces( const TopoFace& face1, const TopoEdge& edge1, ContinuityType cont1, std::vector<double>& parameters1, const TopoFace& face2, const TopoEdge& edge2, ContinuityType cont2, std::vector<double>& parameters2, bool autoReverse, bool isPrecise, const std::vector<double>& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BlendCurves( const std::shared_ptr<Geom3BSplineCurve>& curve1, bool isFront1, ContinuityType cont1, const std::shared_ptr<Geom3BSplineCurve>& curve2, bool isFront2, ContinuityType cont2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BlendCurves( const std::shared_ptr<Geom3BSplineCurve>& curve1, bool isFront1, ContinuityType cont1, std::vector<double>& parameters1, const std::shared_ptr<Geom3BSplineCurve>& curve2, bool isFront2, ContinuityType cont2, std::vector<double>& parameters2),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> BlendSurfaces( const std::shared_ptr<Geom3BSplineSurface>& surf1, bool isUIso1, bool isFront1, ContinuityType cont1, std::vector<double>& parameters1, const std::shared_ptr<Geom3BSplineSurface>& surf2, bool isUIso2, bool isFront2, ContinuityType cont2, std::vector<double>& parameters2, bool autoReverse, bool isPrecise, const std::vector<double>& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> BlendFaces( const TopoFace& face1, const TopoEdge& edge1, ContinuityType cont1, std::vector<double>& parameters1, const TopoFace& face2, const TopoEdge& edge2, ContinuityType cont2, std::vector<double>& parameters2, bool autoReverse, bool isPrecise, const std::vector<double>& tol),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BuildCurve(const std::vector<Point3>& poles, int degree, bool isPeriodic)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> BuildCurve(const std::vector<Point3>& poles, const std::vector<double>& weights, int degree, bool isPeriodic)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static int ValidMaxDegree(int npoles, bool isPeriodic)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::shared_ptr<Geom3BSplineSurface>> SweepWithThreeGuides(const std::shared_ptr<Geom3BSplineCurve>& guide1, const std::shared_ptr<Geom3BSplineCurve>& guide2, const std::shared_ptr<Geom3BSplineCurve>& guide3, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::vector<std::shared_ptr<Geom3BSplineSurface>>> SweepWithTwoGuidesAndRadius(const std::shared_ptr<Geom3BSplineCurve>& guide1, const std::shared_ptr<Geom3BSplineCurve>& guide2, const LawFunction& radiusLaw, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::shared_ptr<Geom3BSplineSurface>> SweepWithCenterAndTwoAngles(const std::shared_ptr<Geom3BSplineCurve>& centerCurve, const std::shared_ptr<Geom3BSplineCurve>& referenceCurve, const LawFunction& angleLaw1, const LawFunction& angleLaw2, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::shared_ptr<Geom3BSplineSurface>> SweepWithCenterAndRadius(const std::shared_ptr<Geom3BSplineCurve>& centerCurve, const LawFunction& radiusLaw, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::vector<std::shared_ptr<Geom3BSplineSurface>>> SweepWithTwoGuidesAndTangencySurface(const std::shared_ptr<Geom3BSplineCurve>& limitCurveWithTangency, const std::shared_ptr<Geom3BSplineSurface>& tangencySurface, const std::shared_ptr<Geom3BSplineCurve>& limitCurve, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::vector<std::shared_ptr<Geom3BSplineSurface>>> SweepWithOneGuideAndTangencySurface(const std::shared_ptr<Geom3BSplineCurve>& guide, const std::shared_ptr<Geom3BSplineSurface>& tangencySurface, const LawFunction& radiusLaw, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::vector<std::shared_ptr<Geom3BSplineSurface>>> SweepWithCurveOnTangencySurface(const std::shared_ptr<Geom3BSplineCurve>& guide, const std::shared_ptr<Geom3BSplineSurface>& tangencySurface, const LawFunction& radiusLaw, const LawFunction& angleLaw1, const LawFunction& angleLaw2, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineCurve> ToBSpline(const std::shared_ptr<Geom3Curve>& curve)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> ToBSpline(const std::shared_ptr<Geom3Surface>& surface)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::vector<std::pair<double, bool>> CalcParamCorrespondece( const std::vector<std::shared_ptr<Geom3Curve>>& curves, bool isPeriodic, bool isConsiderReverse),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::shared_ptr<Geom3BSplineSurface> CurveNetworkSurfaceGordon(const std::vector<std::shared_ptr<Geom3BSplineCurve>>& verticalCurves, const std::vector<std::shared_ptr<Geom3BSplineCurve>>& horizontalCurves)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::shared_ptr<Geom3BSplineSurface>> SweepWithTwoGuideCurves( const std::shared_ptr<Geom3BSplineCurve>& profile, const std::shared_ptr<Geom3BSplineCurve>& guide1, const std::shared_ptr<Geom3BSplineCurve>& guide2, Point3 anchorPoint1, Point3 anchorPoint2, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::shared_ptr<Geom3BSplineSurface>> SweepWithTwoGuideCurves( const std::shared_ptr<Geom3BSplineCurve>& profile, const std::shared_ptr<Geom3BSplineCurve>& guide1, const std::shared_ptr<Geom3BSplineCurve>& guide2, Point3 anchorPoint, const Direction3& anchorDirection, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::pair<NURBSSweepStatus, std::vector<std::shared_ptr<Geom3BSplineSurface>>> SweepWithPullingDirection( const std::shared_ptr<Geom3BSplineCurve>& profile, const std::shared_ptr<Geom3BSplineCurve>& guide, const Direction3& direction, const LawFunction& angleLawFunc, const std::shared_ptr<Geom3BSplineCurve>& spine, double spineLeftBound, double spineRightBound),\n",,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static std::vector<std::shared_ptr<Geom3BSplineCurve>> ExplodeCurve(const std::shared_ptr<Geom3BSplineCurve>& curve)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "AMCAX_API static Array2<std::shared_ptr<Geom3BSplineSurface>> ExplodeSurface(const std::shared_ptr<Geom3BSplineSurface>& surface)\t,\n",
    "output": "none"
}, 
    
{
    "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
    "input": "void SetMajorRadius(double r)\t,\n",
    "output": "none"
}, 