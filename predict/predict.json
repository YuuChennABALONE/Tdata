[
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API int& operator[](int i)\t @return The index of the i-th vertex\n\t @param i The index of vertex\n\t @brief Get the index of the i-th vertex\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const int& operator[](int i)\t @return The index of the i-th vertex\n\t @param i The index of vertex\n\t @brief Get the index of the i-th vertex\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API auto Get()\t @return The tuple of the three vertices\n\t @brief Get the indices of three vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API void Set(int n1, int n2, int n3)\t @param n1,n2,n3 The three vertex indices\n\t @brief Set the vertex indices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 TorusVIso(const Frame3& pos, double majorRadius, double minorRadius, double v)\t @return The v iso parametric curve\n\t @param v The v parameter\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @brief Compute the v isoparametric curve on a torus represented by a local frame, a major radius and a minor radius at a given v parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 TorusUIso(const Frame3& pos, double majorRadius, double minorRadius, double u)\t @return The u isoparametric curve\n\t @param u The u parameter\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @brief Compute the u isoparametric curve on a torus represented by a local frame, a major radius and a minor radius at a given u parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto TorusParameter(const Frame3& pos, double majorRadius, double minorRadius, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @brief Get the uv parameters of a given point on a torus represented by a local frame, a major radius and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 TorusDN(double u, double v, const Frame3& pos, double majorRadius, double minorRadius, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void TorusD3(double u, double v, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv, Vector3& vecuuu, Vector3& vecuuv, Vector3& vecuvv, Vector3& vecvvv)\t @param[out] vecvvv The partial derivative dv^3\n\t @param[out] vecuvv The partial derivative duv^2\n\t @param[out] vecuuv The partial derivative du^2v\n\t @param[out] vecuuu The partial derivative du^3\n\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the torus lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than third-order on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto TorusD3(double u, double v, const Frame3& pos, double majorRadius, double minorRadius)\t @return The tuple of du^3, du^2v, duv^2, dv^3 derivatives\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the third-order partial derivatives on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void TorusD2(double u, double v, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv)\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the torus lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than second-order on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto TorusD2(double u, double v, const Frame3& pos, double majorRadius, double minorRadius)\t @return The tuple of du^2, duv and dv^2 derivatives\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the second-order partial derivatives on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void TorusD1(double u, double v, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& vecu, Vector3& vecv)\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the torus lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of first-order on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto TorusD1(double u, double v, const Frame3& pos, double majorRadius, double minorRadius)\t @return The pair of du and dv derivatives\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the first-order partial derivatives on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 TorusD0(double u, double v, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 TorusValue(double u, double v, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the torus lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a torus represented by a local frame, a major radius and a minor radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 SphereVIso(const Frame3& pos, double radius, double v)\t @return The v iso parametric curve\n\t @param v The v parameter\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @brief Compute the v isoparametric curve on a sphere represented by a local frame and a radius at a given v parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 SphereUIso(const Frame3& pos, double radius, double u)\t @return The u isoparametric curve\n\t @param u The u parameter\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @brief Compute the u isoparametric curve on a sphere represented by a local frame and a radius at a given u parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto SphereParameter(const Frame3& pos, double radius, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @brief Get the uv parameters of a given point on a sphere represented by a local frame and a radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 SphereDN(double u, double v, const Frame3& pos, double radius, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void SphereD3(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv, Vector3& vecuuu, Vector3& vecuuv, Vector3& vecuvv, Vector3& vecvvv)\t @param[out] vecvvv The partial derivative dv^3\n\t @param[out] vecuvv The partial derivative duv^2\n\t @param[out] vecuuv The partial derivative du^2v\n\t @param[out] vecuuu The partial derivative du^3\n\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the sphere lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than third-order on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto SphereD3(double u, double v, const Frame3& pos, double radius)\t @return The tuple of du^3, du^2v, duv^2, dv^3 derivatives\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the third-order partial derivatives on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void SphereD2(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv)\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the sphere lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than second-order on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto SphereD2(double u, double v, const Frame3& pos, double radius)\t @return The tuple of du^2, duv and dv^2 derivatives\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the second-order partial derivatives on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void SphereD1(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv)\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the sphere lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of first-order on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto SphereD1(double u, double v, const Frame3& pos, double radius)\t @return The pair of du and dv derivatives\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the first-order partial derivatives on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 SphereD0(double u, double v, const Frame3& pos, double radius)\t @return The point\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 SphereValue(double u, double v, const Frame3& pos, double radius)\t @return The point\n\t @param radius The radius\n\t @param pos The local frame where the sphere lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a sphere represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 ConeVIso(const Frame3& pos, double radius, double angle, double v)\t @return The v iso parametric curve\n\t @param v The v parameter\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @brief Compute the v isoparametric curve on a cone represented by a local frame, a reference radius and a semi-angle at a given v parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Line3 ConeUIso(const Frame3& pos, double radius, double angle, double u)\t @return The u isoparametric curve\n\t @param u The u parameter\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @brief Compute the u isoparametric curve on a cone represented by a local frame, a reference radius and a semi-angle at a given u parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto ConeParameter(const Frame3& pos, double radius, double angle, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @brief Get the uv parameters of a given point on a cone represented by a local frame, a reference radius and a semi-angle\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 ConeDN(double u, double v, const Frame3& pos, double radius, double angle, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ConeD3(double u, double v, const Frame3& pos, double radius, double angle, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv, Vector3& vecuuu, Vector3& vecuuv, Vector3& vecuvv, Vector3& vecvvv)\t @param[out] vecvvv The partial derivative dv^3\n\t @param[out] vecuvv The partial derivative duv^2\n\t @param[out] vecuuv The partial derivative du^2v\n\t @param[out] vecuuu The partial derivative du^3\n\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] angle The semi-angle\n\t @param[in] radius The reference radius\n\t @param[in] pos The local frame where the cone lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than third-order on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto ConeD3(double u, double v, const Frame3& pos, double radius, double angle)\t @return The tuple of du^3, du^2v, duv^2, dv^3 derivatives\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the third-order partial derivatives on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ConeD2(double u, double v, const Frame3& pos, double radius, double angle, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv)\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] angle The semi-angle\n\t @param[in] radius The reference radius\n\t @param[in] pos The local frame where the cone lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than second-order on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto ConeD2(double u, double v, const Frame3& pos, double radius, double angle)\t @return The tuple of du^2, duv and dv^2 derivatives\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the second-order partial derivatives on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ConeD1(double u, double v, const Frame3& pos, double radius, double angle, Point3& p, Vector3& vecu, Vector3& vecv)\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] angle The semi-angle\n\t @param[in] radius The reference radius\n\t @param[in] pos The local frame where the cone lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of first-order on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto ConeD1(double u, double v, const Frame3& pos, double radius, double angle)\t @return The pair of du and dv derivatives\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the first-order partial derivatives on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 ConeD0(double u, double v, const Frame3& pos, double radius, double angle)\t @return The point\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 ConeValue(double u, double v, const Frame3& pos, double radius, double angle)\t @return The point\n\t @param angle The semi-angle\n\t @param radius The reference radius\n\t @param pos The local frame where the cone lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cone represented by a local frame, a reference radius and a semi-angle at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 CylinderVIso(const Frame3& pos, double radius, double v)\t @return The v iso parametric curve\n\t @param v The v parameter\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @brief Compute the v isoparametric curve on a cylinder represented by a local frame and a radius at a given v parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Line3 CylinderUIso(const Frame3& pos, double radius, double u)\t @return The u isoparametric curve\n\t @param u The u parameter\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @brief Compute the u isoparametric curve on a cylinder represented by a local frame and a radius at a given u parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto CylinderParameter(const Frame3& pos, double radius, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @brief Get the uv parameters of a given point on a cylinder represented by a local frame and a radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 CylinderDN(double u, double v, const Frame3& pos, double radius, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void CylinderD3(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv, Vector3& vecuuu, Vector3& vecuuv, Vector3& vecuvv, Vector3& vecvvv)\t @param[out] vecvvv The partial derivative dv^3\n\t @param[out] vecuvv The partial derivative duv^2\n\t @param[out] vecuuv The partial derivative du^2v\n\t @param[out] vecuuu The partial derivative du^3\n\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the cylinder lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than third-order on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto CylinderD3(double u, double v, const Frame3& pos, double radius)\t @return The tuple of du^3, du^2v, duv^2, dv^3 derivatives\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the third-order partial derivatives on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void CylinderD2(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv)\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the cylinder lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than second-order on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto CylinderD2(double u, double v, const Frame3& pos, double radius)\t @return The tuple of du^2, duv and dv^2 derivatives\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the second-order partial derivatives on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void CylinderD1(double u, double v, const Frame3& pos, double radius, Point3& p, Vector3& vecu, Vector3& vecv)\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] radius The radius\n\t @param[in] pos The local frame where the cylinder lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of first-order on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto CylinderD1(double u, double v, const Frame3& pos, double radius)\t @return The pair of du and dv derivatives\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the first-order partial derivatives on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 CylinderD0(double u, double v, const Frame3& pos, double radius)\t @return The point\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 CylinderValue(double u, double v, const Frame3& pos, double radius)\t @return The point\n\t @param radius The radius\n\t @param pos The local frame where the cylinder lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cylinder represented by a local frame and a radius at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Line3 PlaneVIso(const Frame3& pos, double v)\t @return The v iso parametric curve\n\t @param v The v parameter\n\t @param pos The local frame where the plane lies\n\t @brief Compute the v isoparametric curve on a plane represented by a local frame at a given v parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Line3 PlaneUIso(const Frame3& pos, double u)\t @return The u isoparametric curve\n\t @param u The u parameter\n\t @param pos The local frame where the plane lies\n\t @brief Compute the u isoparametric curve on a plane represented by a local frame at a given u parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto PlaneParameter(const Frame3& pos, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param pos The local frame where the plane lies\n\t @brief Get the uv parameters of a given point on a plane represented by a local frame\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 PlaneDN(double u, double v, const Frame3& pos, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void PlaneD3(double u, double v, const Frame3& pos, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv, Vector3& vecuuu, Vector3& vecuuv, Vector3& vecuvv, Vector3& vecvvv)\t @param[out] vecvvv The partial derivative dv^3\n\t @param[out] vecuvv The partial derivative duv^2\n\t @param[out] vecuuv The partial derivative du^2v\n\t @param[out] vecuuu The partial derivative du^3\n\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] pos The local frame where the plane lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than third-order on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto PlaneD3(double u, double v, const Frame3& pos)\t @return The tuple of du^3, du^2v, duv^2, dv^3 derivatives\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the third-order partial derivatives on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void PlaneD2(double u, double v, const Frame3& pos, Point3& p, Vector3& vecu, Vector3& vecv, Vector3& vecuu, Vector3& vecuv, Vector3& vecvv)\t @param[out] vecvv The partial derivative dv^2\n\t @param[out] vecuv The partial derivative duv\n\t @param[out] vecuu The partial derivative du^2\n\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] pos The local frame where the plane lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of not more than second-order on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto PlaneD2(double u, double v, const Frame3& pos)\t @return The tuple of du^2, duv and dv^2 derivatives\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the second-order partial derivatives on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void PlaneD1(double u, double v, const Frame3& pos, Point3& p, Vector3& vecu, Vector3& vecv)\t @param[out] vecv The partial derivative dv\n\t @param[out] vecu The partial derivative du\n\t @param[out] p The point\n\t @param[in] pos The local frame where the plane lies\n\t @param[in] v The v parameter\n\t @param[in] u The u parameter\n\t @brief Compute the point and the partial derivatives of first-order on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto PlaneD1(double u, double v, const Frame3& pos)\t @return The pair of du and dv derivatives\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the first-order partial derivatives on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 PlaneD0(double u, double v, const Frame3& pos)\t @return The point\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 PlaneValue(double u, double v, const Frame3& pos)\t @return The point\n\t @param pos The local frame where the plane lies\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a plane represented by a local frame at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto Parameter(const Torus& torus, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param torus The torus\n\t @brief Get the uv parameters of a given point on a torus\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto Parameter(const Sphere& sphere, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param sphere The sphere\n\t @brief Get the uv parameters of a given point on a sphere\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto Parameter(const Cone& cone, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param cone The cone\n\t @brief Get the uv parameters of a given point on a cone\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto Parameter(const Cylinder& cylinder, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param cylinder The cylinder\n\t @brief Get the uv parameters of a given point on a cylinder\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static auto Parameter(const Plane& plane, const Point3& p)\t @return The pair of uv parameters\n\t @param p The point\n\t @param plane The plane\n\t @brief Get the uv parameters of a given point on a plane\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, double v, const Torus& torus, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param torus The torus\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a torus at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, double v, const Sphere& sphere, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param sphere The sphere\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a sphere at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, double v, const Cone& cone, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param cone The cone\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a cone at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, double v, const Cylinder& cylinder, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param cylinder The cylinder\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a cylinder at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, double v, const Plane& plane, int nu, int nv)\t @return The partial derivative\n\t @param nv The order on the v direction\n\t @param nu The order on the u direction\n\t @param plane The plane\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the partial derivative of given order on a plane at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, double v, const Torus& torus)\t @return The point\n\t @param torus The torus\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a torus at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, double v, const Sphere& sphere)\t @return The point\n\t @param sphere The sphere\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a sphere at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, double v, const Cone& cone)\t @return The point\n\t @param cone The cone\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cone at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, double v, const Cylinder& cylinder)\t @return The point\n\t @param cylinder The cylinder\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a cylinder at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, double v, const Plane& plane)\t @return The point\n\t @param plane The plane\n\t @param v The v parameter\n\t @param u The u parameter\n\t @brief Compute the point on a plane at given parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API Sphere(const Frame3& frame, double r)\t @param r The radius\n\t @param frame The local frame\n\t @brief Construct from a local frame and a radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "Sphere()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::istream& operator>>(std::istream& is, Polygon3& poly)\t @return The input stream\n\t @param poly The polygon\n\t @param is The input stream\n\t @brief Read the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::ostream& operator<<(std::ostream& os, const Polygon3& poly)\t @return The output stream\n\t @param poly The polygon\n\t @param os The output stream\n\t @brief Write the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API std::vector<Point3>& Vertices()\t @return The vertices\n\t @brief Get the vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const std::vector<Point3>& Vertices()\t @return The vertices\n\t @brief Get the vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API Polygon3(const std::vector<Point3>& verts, const std::vector<double>& params)\t @param params The parameters\n\t @param verts The vertices\n\t @brief Construct from a vector of vertices and a vector of parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API explicit Polygon3(const std::vector<Point3>& verts)\t @param verts The vertices\n\t @brief Construct from a vector of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API Polygon3(int nv, bool hasParams)\t @param hasParams Do the vertices have parameters\n\t @param nv The number of vertices\n\t @brief Construct with a specified number of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "Polygon3()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::istream& operator>>(std::istream& is, Polygon2& poly)\t @return The input stream\n\t @param poly The polygon\n\t @param is The input stream\n\t @brief Read the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::ostream& operator<<(std::ostream& os, const Polygon2& poly)\t @return The output stream\n\t @param poly The polygon\n\t @param os The output stream\n\t @brief Write the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API std::vector<Point2>& Vertices()\t @return The vertices\n\t @brief Get the vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const std::vector<Point2>& Vertices()\t @return The vectices\n\t @brief Get the vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API explicit Polygon2(const std::vector<Point2>& verts)\t @param verts The vertices\n\t @brief Construct from a vector of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API explicit Polygon2(int nv)\t @param nv The number of vertices\n\t @brief Construct with a specified number of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] PointT<double, DIM> Focus()\t @return The focus point\n\t @brief Get the focus point\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "void SetFocal(double focal)\t @param focal The focal length\n\t @brief Set the focal length\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "ParabolaS(const FrameT<double, DIM>& frame, double focal)\t @param focal The focal length\n\t @param frame The frame\n\t @brief Construct from a frame and a focal length\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "ParabolaS()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::istream& operator>>(std::istream& is, PolygonOnTriangularMesh& mesh)\t @return The input stream\n\t @param mesh The polygon\n\t @param is The input stream\n\t @brief Read the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API friend std::ostream& operator<<(std::ostream& os, const PolygonOnTriangularMesh& mesh)\t @return The output stream\n\t @param mesh The polygon\n\t @param os The output stream\n\t @brief Write the polygon\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API void SetParameters(const std::shared_ptr<std::vector<double>>& params)\t @param params The parameters\n\t @brief Set the parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API void SetParameter(int i, double value)\t @param value The parameter\n\t @param i The index of the parameter\n\t @brief Set the i-th parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API double Parameter(int i)\t @return The i-th parameter\n\t @param i The index of parameter\n\t @brief Get the i-th parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const int& Vertex(int i)\t @return The i-th vertex index\n\t @param i The index of the vertex index\n\t @brief Get the i-th vertex index\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API std::vector<int>& Vertices()\t @return The vertex indices\n\t @brief Get the vertex indices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const std::vector<int>& Vertices()\t @return The vertex indices\n\t @brief Get the vertex indices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API PolygonOnTriangularMesh(const std::vector<int>& vids, const std::vector<double>& params)\t @param params The parameters\n\t @param vids The vertex indices\n\t @brief Construct from a vector of vertex indices and a vector of parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API explicit PolygonOnTriangularMesh(const std::vector<int>& vids)\t @param vids The vertex indices\n\t @brief Construct from a vector of vertex indices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API PolygonOnTriangularMesh(int nv, bool hasParams)\t @param hasParams Do the vertices have parameters\n\t @param nv The number of vertices\n\t @brief Construct with a specified number of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "PolygonOnTriangularMesh()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API std::vector<double>& Parameters()\t @return The parameters\n\t @brief Get the parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API const std::vector<double>& Parameters()\t @return The parameters\n\t @brief Get the parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API bool HasParameters()\t @return True if the vertices have parameters\n\t @brief Do the vertices have parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API int NVertices()\t @return The number of vertices\n\t @brief Get the number of vertices\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API void SetDeflection(double def)\t @param def The deflection\n\t @brief Set the deflection\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API double Deflection()\t @return The deflection\n\t @brief Get the deflection\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API double MinSize()\t @return The minimum size\n\t @brief Get the minimum size\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API bool HasMinSize()\t @return True if the minimum size is non-negative\n\t @brief Is the minimum size defined\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API bool HasAngle()\t @return True if the angle deflection is non-negative\n\t @brief Is the angle deflection defined\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API bool HasDeflection()\t @return True if the linear deflection is non-negative\n\t @brief Is the linear deflection is defined\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API explicit MeshParameters(double def = -1.0, double ang = -1.0, double min = -1.0)\t @param min The minimum size\n\t @param ang The angle deflection\n\t @param def The linear deflection\n\t @brief Construct from linear deflection, angle deflection and mimimum size\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "LineBase(const PointT<double, DIM>& point, const DirectionT<double, DIM>& dir)\t @param dir The line direction\n\t @param point The location point\n\t @brief Construct from a point and a direction\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "explicit LineBase(const AxisT<double, DIM>& axis)\t @param axis The axis\n\t @brief Construct from an axis\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "LineBase()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "HyperbolaS(const FrameT<double, DIM>& frame, double major, double minor)\t @param minor The minor radius\n\t @param major The major radius\n\t @param frame The frame\n\t @brief Construct from a frame, major and minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "HyperbolaS()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "EllipseS(const FrameT<double, DIM>& frame, double major, double minor)\t @param minor The minor radius\n\t @param major The major radius\n\t @param frame The frame\n\t @brief Construct from a frame, major and minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "EllipseS()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Hyperbola3 To3d(const Frame3& pos, const Hyperbola2& h)\t @return The 3D hyperbola\n\t @param h The 2D hyperbola\n\t @param pos The 3D local frame\n\t @brief Convert a 2D hyperbola to a 3D hyperbola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Parabola3 To3d(const Frame3& pos, const Parabola2& p)\t @return The 3D parabola\n\t @param p The 2D parabola\n\t @param pos The 3D local frame\n\t @brief Convert a 2D parabola to a 3D parabola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Ellipse3 To3d(const Frame3& pos, const Ellipse2& e)\t @return The 3D ellipse\n\t @param e The 2D ellipse\n\t @param pos The 3D local frame\n\t @brief Convert a 2D ellipse to a 3D ellipse\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Circle3 To3d(const Frame3& pos, const Circle2& c)\t @return The 3D circle\n\t @param c The 2D circle\n\t @param pos The 3D local frame\n\t @brief Convert a 2D circle to a 3D circle\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Line3 To3d(const Frame3& pos, const Line2& l)\t @return The 3D line\n\t @param l The 2D line\n\t @param pos The 3D local frame\n\t @brief Convert a 2D line to a 3D line\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Frame3 To3d(const Frame3& pos, const Frame2& f)\t @return The 3D frame\n\t @param f The 2D frame\n\t @param pos The 3D local frame\n\t @brief Convert a 2D frame to a 3D frame\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Axis3 To3d(const Frame3& pos, const Axis2& a)\t @return The 3D axis\n\t @param a The 2D axis\n\t @param pos The 3D local frame\n\t @brief Convert a 2D axis to a 3D axis\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Direction3 To3d(const Frame3& pos, const Direction2& d)\t @return The 3D direction\n\t @param d The 2D direction\n\t @param pos The 3D local frame\n\t @brief Convert a 2D direction to a 3D direction\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 To3d(const Frame3& pos, const Vector2& v)\t @return The 3D vector\n\t @param v The 2D vector\n\t @param pos The 3D local frame\n\t @brief Convert a 2D vector to a 3D vector\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 To3d(const Frame3& pos, const Point2& p)\t @return The 3D point\n\t @param p The 2D point\n\t @param pos The 3D local frame\n\t @brief Convert a 2D point to a 3D point\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double HyperbolaParameter(const Frame2& pos, double majorRadius, double minorRadius, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @brief Compute the parameter of a given point on a 2D hyperbola represented by a local frame, a major radius and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double HyperbolaParameter(const Frame3& pos, double majorRadius, double minorRadius, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @brief Compute the parameter of a given point on a 3D hyperbola represented by a local frame, a major radius and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 HyperbolaDN(double u, const Frame2& pos, double majorRadius, double minorRadius, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 HyperbolaDN(double u, const Frame3& pos, double majorRadius, double minorRadius, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD3(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 HyperbolaD3(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The third derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD3(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 HyperbolaD3(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The third derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD2(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1, Vector2& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 HyperbolaD2(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The second derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD2(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1, Vector3& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 HyperbolaD2(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The second derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD1(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 HyperbolaD1(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The first derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void HyperbolaD1(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the hyperbola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 HyperbolaD1(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The first derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 HyperbolaD0(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 HyperbolaD0(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 HyperbolaValue(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 HyperbolaValue(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the hyperbola lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D hyperbola represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double ParabolaParameter(const Frame2& pos, double focal, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @brief Compute the parameter of a given point on a 2D parabola represented by a local frame and a focal length\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double ParabolaParameter(const Frame3& pos, double focal, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @brief Compute the parameter of a given point on a 3D parabola represented by a local frame and a focal length\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 ParabolaDN(double u, const Frame2& pos, double focal, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 ParabolaDN(double u, const Frame3& pos, double focal, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD3(double u, const Frame2& pos, double focal, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 ParabolaD3(double u, const Frame2& pos, double focal)\t @return The third derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD3(double u, const Frame3& pos, double focal, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 ParabolaD3(double u, const Frame3& pos, double focal)\t @return The third derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD2(double u, const Frame2& pos, double focal, Point2& p, Vector2& v1, Vector2& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 ParabolaD2(double u, const Frame2& pos, double focal)\t @return The second derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD2(double u, const Frame3& pos, double focal, Point3& p, Vector3& v1, Vector3& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 ParabolaD2(double u, const Frame3& pos, double focal)\t @return The second derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD1(double u, const Frame2& pos, double focal, Point2& p, Vector2& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 ParabolaD1(double u, const Frame2& pos, double focal)\t @return The first derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void ParabolaD1(double u, const Frame3& pos, double focal, Point3& p, Vector3& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] focal The focal length\n\t @param[in] pos The local frame where the parabola lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 ParabolaD1(double u, const Frame3& pos, double focal)\t @return The first derivative vector\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 ParabolaD0(double u, const Frame2& pos, double focal)\t @return The point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 ParabolaD0(double u, const Frame3& pos, double focal)\t @return The point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 ParabolaValue(double u, const Frame2& pos, double focal)\t @return The point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 ParabolaValue(double u, const Frame3& pos, double focal)\t @return The point\n\t @param focal The focal length\n\t @param pos The local frame where the parabola lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D parabola represented by a local frame and a focal length at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double EllipseParameter(const Frame2& pos, double majorRadius, double minorRadius, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @brief Compute the parameter of a given point on a 2D ellipse represented by a local frame, a major radius and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double EllipseParameter(const Frame3& pos, double majorRadius, double minorRadius, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @brief Compute the parameter of a given point on a 3D ellipse represented by a local frame, a major radius and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 EllipseDN(double u, const Frame2& pos, double majorRadius, double minorRadius, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 EllipseDN(double u, const Frame3& pos, double majorRadius, double minorRadius, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD3(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 EllipseD3(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The third derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD3(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 EllipseD3(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The third derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD2(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1, Vector2& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 EllipseD2(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The second derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD2(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1, Vector3& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 EllipseD2(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The second derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD1(double u, const Frame2& pos, double majorRadius, double minorRadius, Point2& p, Vector2& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 EllipseD1(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The first derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void EllipseD1(double u, const Frame3& pos, double majorRadius, double minorRadius, Point3& p, Vector3& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] minorRadius The minor radius\n\t @param[in] majorRadius The major radius\n\t @param[in] pos The local frame where the ellipse lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 EllipseD1(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The first derivative vector\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 EllipseD0(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 EllipseD0(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 EllipseValue(double u, const Frame2& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 EllipseValue(double u, const Frame3& pos, double majorRadius, double minorRadius)\t @return The point\n\t @param minorRadius The minor radius\n\t @param majorRadius The major radius\n\t @param pos The local frame where the ellipse lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D ellipse represented by a local frame, a major radius and a minor radius at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double LineParameter(const Axis2& pos, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param pos The axis where the line lies\n\t @brief Compute the parameter of a given point on a 2D line represented by an axis\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double LineParameter(const Axis3& pos, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param pos The axis where the line lies\n\t @brief Compute the parameter of a given point on a 3D line represented by an axis\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 LineDN(double u, const Axis2& pos, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 LineDN(double u, const Axis3& pos, int n)\t @return The n-th derivative vector\n\t @param n The order of derivative\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD3(double u, const Axis2& pos, Point2& p, Vector2& v1, Vector2& v2, Vector2& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 LineD3(double u, const Axis2& pos)\t @return The third derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD3(double u, const Axis3& pos, Point3& p, Vector3& v1, Vector3& v2, Vector3& v3)\t @param[out] v3 The third derivative\n\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first three derivatives on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 LineD3(double u, const Axis3& pos)\t @return The third derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the third derivative on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD2(double u, const Axis2& pos, Point2& p, Vector2& v1, Vector2& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 LineD2(double u, const Axis2& pos)\t @return The second derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD2(double u, const Axis3& pos, Point3& p, Vector3& v1, Vector3& v2)\t @param[out] v2 The second derivative\n\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first two derivatives on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 LineD2(double u, const Axis3& pos)\t @return The second derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the second derivative on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD1(double u, const Axis2& pos, Point2& p, Vector2& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 LineD1(double u, const Axis2& pos)\t @return The first derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API static void LineD1(double u, const Axis3& pos, Point3& p, Vector3& v1)\t @param[out] v1 The first derivative\n\t @param[out] p The point\n\t @param[in] pos The axis where the line lies\n\t @param[in] u The parameter\n\t @brief Compute the point and the first derivative on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 LineD1(double u, const Axis3& pos)\t @return The first derivative vector\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the first derivative on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 LineD0(double u, const Axis2& pos)\t @return The point\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 LineD0(double u, const Axis3& pos)\t @return The point\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 LineValue(double u, const Axis2& pos)\t @return The point\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the point on a 2D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 LineValue(double u, const Axis3& pos)\t @return The point\n\t @param pos The axis where the line lies\n\t @param u The parameter\n\t @brief Compute the point on a 3D line represented by an axis at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Hyperbola2& hyperbola, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param hyperbola The hyperbola\n\t @brief Compute the parameter of a given point on a 2D hyperbola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Parabola2& parabola, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param parabola The parabola\n\t @brief Compute the parameter of a given point on a 2D parabola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Ellipse2& ellipse, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param ellipse The ellipse\n\t @brief Compute the parameter of a given point on a 2D ellipse\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Circle2& circle, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param circle The circle\n\t @brief Compute the parameter of a given point on a 2D circle\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Line2& line, const Point2& p)\t @return The parameter of point\n\t @param p The given point\n\t @param line The line\n\t @brief Compute the parameter of a given point on a 2D line\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Hyperbola3& hyperbola, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param hyperbola The hyperbola\n\t @brief Compute the parameter of a given point on a 3D hyperbola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Parabola3& parabola, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param parabola The parabola\n\t @brief Compute the parameter of a given point on a 3D parabola\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Ellipse3& ellipse, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param ellipse The ellipse\n\t @brief Compute the parameter of a given point on a 3D ellipse\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Circle3& circle, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param circle The circle\n\t @brief Compute the parameter of a given point on a 3D circle\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double Parameter(const Line3& line, const Point3& p)\t @return The parameter of point\n\t @param p The given point\n\t @param line The line\n\t @brief Compute the parameter of a given point on a 3D line\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 DN(double u, const Hyperbola2& hyperbola, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param hyperbola The hyperbola\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D hyperbola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 DN(double u, const Parabola2& parabola, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param parabola The parabola\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D parabola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 DN(double u, const Ellipse2& ellipse, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param ellipse The ellipse\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D ellipse at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 DN(double u, const Circle2& circle, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param circle The circle\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D circle at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector2 DN(double u, const Line2& line, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param line The line\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 2D line at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, const Hyperbola3& hyperbola, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param hyperbola The hyperbola\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D hyperbola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, const Parabola3& parabola, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param parabola The parabola\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D parabola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, const Ellipse3& ellipse, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param ellipse The ellipse\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D ellipse at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, const Circle3& circle, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param circle The circle\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D circle at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Vector3 DN(double u, const Line3& line, int n)\t @return The n-th derivative\n\t @param n The order of derivative\n\t @param line The line\n\t @param u The parameter\n\t @brief Compute the n-th derivative on a 3D line at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 Value(double u, const Hyperbola2& hyperbola)\t @return The resulting point\n\t @param hyperbola The hyperbola\n\t @param u The parameter\n\t @brief Compute the point on a 2D hyperbola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 Value(double u, const Parabola2& parabola)\t @return The resulting point\n\t @param parabola The parabola\n\t @param u The parameter\n\t @brief Compute the point on a 2D parabola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 Value(double u, const Ellipse2& ellipse)\t @return The resulting point\n\t @param ellipse The ellipse\n\t @param u The parameter\n\t @brief Compute the point on a 2D ellipse at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 Value(double u, const Circle2& circle)\t @return The resulting point\n\t @param circle The circle\n\t @param u The parameter\n\t @brief Compute the point on a 2D circle at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point2 Value(double u, const Line2& line)\t @return The resulting point\n\t @param line The line\n\t @param u The parameter\n\t @brief Compute the point on a 2D line at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, const Hyperbola3& hyperbola)\t @return The resulting point\n\t @param hyperbola The hyperbola\n\t @param u The parameter\n\t @brief Compute the point on a 3D hyperbola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, const Parabola3& parabola)\t @return The resulting point\n\t @param parabola The parabola\n\t @param u The parameter\n\t @brief Compute the point on a 3D parabola at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, const Ellipse3& ellipse)\t @return The resulting point\n\t @param ellipse The ellipse\n\t @param u The parameter\n\t @brief Compute the point on a 3D ellipse at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, const Circle3& circle)\t @return The resulting point\n\t @param circle The circle\n\t @param u The parameter\n\t @brief Compute the point on a 3D circle at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static Point3 Value(double u, const Line3& line)\t @return The resulting point\n\t @param line The line\n\t @param u The parameter\n\t @brief Compute the point on a 3D line at a parameter\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API static double InPeriod(double u, double ufirst, double ulast)\t @return The output parameter that in the range [ufirst, ulast]\n\t @param ulast The upper bound of the first period\n\t @param ufirst The lower bound of the first period\n\t @param u The input parameter\n\t @details If either of the input parameters is infinity or the period is less than a small epsilon, then this function returns u without any changes.\n\t @brief Put a parameter into a period defined by the first and last parameters\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "CircleS(const FrameT<double, DIM>& frame, double r)\t @param r The radius\n\t @param frame The local frame\n\t @brief Construct from a local frame and a radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "CircleS()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API Torus(const Frame3& frame, double major, double minor)\t @param minor The minor radius\n\t @param major The major radius\n\t @param frame The local frame\n\t @brief Construct from a local frame, a major and a minor radius\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "Torus()\t @brief Default constructor\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "[[nodiscard]] AMCAX_API double Volume()\t @return The volume of the torus\n\t @brief Get the volume of the torus\n,\n",
        "output": "none"
    }, 
        
    {
        "instruction": "Generate a test program based on the following method declarations and parameter parsing ,\n",
        "input": "AMCAX_API void SetSemiAngle(double angle)\t @param angle The semi-angle\n\t @brief Set the semi-angle\n,\n",
        "output": "none"
    }
]